#%RAML 1.0
title: WHAM API
version: v1
mediaType: application/json
baseUri: http://api.wham.com
types:
  User:
    properties:
      username: string
    example:
      username: "UserA"

  NewUser:
    properties:
      username: string
      password: string
    example:
      username: "UserA"
      password: "$2b$10$WzyxzUnJPWDHAAw3b2BUFeOq5J.jcL.YLJKquTojjJXu2XKmPp9ru"

  Therapist:
    type: User
    properties: 
      num_patients: number
    example:
      username: "UserA"
      num_patients: 5

  Patient:
    type: User
    properties: 
          dob: date-only
          weight: number # In Kilos
          height: number # In CM
          information: string # Stuff about the patient that is not already included
          last_score: string
          last_activity_time: datetime
    example:
      username: "Joey"
      dob: "1982-07-02"
      weight: 155
      height: 72
      information: "He cannot move his right arm"
      last_score: 100
      last_activity_time: 1981-02-27T05:00:00.000Z

  PatientNoSession:
    type: User
    properties: 
          dob: date-only
          weight: number # In Kilos
          height: number # In CM
          information: string # Stuff about the patient that is not already included
    example:
      username: "Joey"
      dob: "1982-07-02"
      weight: 155
      height: 72
      information: "He cannot move his right arm"

  NewTherapist:
    type: NewUser

  NewPatient:
    type: NewUser
    properties: 
      dob: date-only
      weight: number # In Kilos
      height: number # In CM
      information: string # Stuff about the patient that is not already included
    example:
      username: "Joey"
      password: "$2b$10$WzyxzUnJPWDHAAw3b2BUFeOq5J.jcL.YLJKquTojjJXu2XKmPp9ru"
      dob: "1982-07-02"
      weight: 155
      height: 72
      information: "He cannot move his right arm"

  UserLogin:
    properties: 
      username: string
      password: string


  NewPatientSession:
    properties:
      score: number
      time: datetime
    example:
      score: 88
      time: 2016-02-28T16:41:41.090Z

  PatientSession:
    properties:
      activityLevel: number
      time: datetime
      id: number 
    example:
      activityLevel: 88
      time: 2016-02-28T16:41:41.090Z
      id: 1427828
  
  Message:
    properties: 
      patientID: string
      therapistID: string
      message_content: string
      date_sent: datetime
      is_read: boolean
      messageID: number
    example:
      patientID: "Joey"
      therapistID: "UserA"
      message_content: "This is a message"
      date_sent: "2015-03-21 03:21"
      is_read: true
      messageID: 1

  NewMessage:
    properties: 
      therapistID: string
      message_content: string
      date_sent: datetime
    example:
      therapistID: "UserA"
      message_content: "This is a message"
      date_sent: "2015-03-21 03:21"

  NewPatientTherapistPair:
    properties: 
      patientID: string

  PatientInfoResponse:
    properties: 
      info: PatientNoSession
      sessions: PatientSession[]
      messages: Message[]


resourceTypes:
  Collection:
    get:
      queryParameters: 
        auth_token: string

      description: Get overview information on a collection of <<item>>s
      responses:
        200:
          body:
            application/json:
              type: <<item>>[]
        403:
          description: Permission Not Granted

  Member:
    delete:
      queryParameters: 
        auth_token: string

      description: Delete the <<item>>
      responses:
        204:
          description: Sucessfully deleted.
        403:
          description: Bad Request

  UserCollection:
    type:  { Collection: {item : <<item>>} }
    post:
      description: Register a new <<item>> user.
      body:
        application/json:
          type: <<newItem>>

      responses:
        200:
          description: Returns the token that is bound to the users account.
          body:
            application/json:
              properties: 
                token: string
        403:
          description: Invalid username/password.
          body:
            properties:
              error: string
            examples:
              usernameTaken:
                error: "Username taken already."
              badPassword:
                error: "Password must be at least 8 characters long."

/register:
  get:
    description: Shows the user registration screen.

/logout:
  get:
    description: Clears the auth-token cookie and shows the logout screen.

/login:
  get:
    description: Returns the HTML code for the login chooser.

  /therapist:
    get:
      description: Returns the HTML for the therapist login.
    post:
      description: Returns the authentication token  if there is a sucessful login.
      body:
        application/json:
          type: UserLogin
      responses: 
        200:
          description: Returns the authentication token.
          body:
            application/json:
              properties:
                token: string
        403:
          description: Bad request.
          body:
            application/json:
              properties:
                error: string
            example: {"error": "Invalid password"}

  /patient:
    get:
      description: Returns the HTML for the patients login.
    post:
      description: Returns the authentication token if there is a sucessful login.
      body:
        application/json:
          type: UserLogin
      responses: 
        200:
          description: Returns the authentication token.
          body:
            application/json:
              properties:
                token: string
        403:
          description: Bad request.
          body:
            application/json:
              properties:
                error: string
            example: {"error": "Invalid password"}

/patients:
  type:  { UserCollection: {newItem : NewPatient, item : Patient} }
  description: A collection of all patients in the system.

  /{id}:
    type:  { Member: {item : Patient} }
    description: A specific patient.
    get:
      queryParameters: 
       auth_token: string
      description: Get specific information on this patient
      responses:
        200:
          body:
            application/json:
              type: PatientInfoResponse
        403:
            description: User does not exist
            body:
              application/json:
                type: string
              examples:
                userDoesNotExist:
                  error: "Patient does not exist" 
                badToken:
                  error: "Permission not granted"

    /messages:
      type:  { Collection: {item : Message} }
      description: A collection of all the patient's messages.
      post:
        queryParameters: 
          auth_token: string
        description: Sends a message to this patient.
        body:
          application/json:
            type: NewMessage
        responses:
          204:
            description: Message was sucessfully sent    
          403:
            description: Message failed to send       

      /{id}:
        type:  { Member: {item : Message} }
        description: A specific message. 

        patch:
          queryParameters: 
            auth_token: string
          description: Sets this message set as read.
          responses: 
            204:
              description: The message was sucessfully marked as read.
            403: 
              description: The message was unsucessfully makred as read. 

        get:
          queryParameters: 
            auth_token: string
          description: Returns the info for this message
          responses:
            201:
              body:
                application/json:
                  type: Message
            403:
              description: Message does not exist
              body:
                application/json:
                  type: string
                examples:
                  userDoesNotExist:
                    error: "Message does not exist"

    /sessions:
      type:  { Collection: {item : PatientSession} }
      description: A collection of a patient's sessions.
      post:
        queryParameters: 
          auth_token: string
        body:
          application/json:
            type: NewPatientSession
        responses:
          204:
            description: The session was sucessfully added.
          403:
            description: Session could not be added.

      /{id}:
        type:  { Member: {item : PatientSession} }
        description: A specific patient session.

        get:
          description: Returns info about one session.
          responses: 
            200:
              description: Gives the info.
              body:
                application/json:
                  type: PatientSession
            403:
              description: Bad request          
              

/therapists:
  type:  { UserCollection: {newItem : NewTherapist, item : Therapist} }
  description: A collection of all therapists in the system.

  /{id}:
    type:  { Member: {item : Therapist} }
    description: A specific therapist.

    get:
      queryParameters: 
          auth_token: string
      responses: 
        200:
          description: Returns the info about this therapist.
          body:
            application/json:
              type: Therapist
        403:
          description: Not authorized to view.

    /patients:
      type:  { Collection: {item : Patient} } 

      post:
        queryParameters: 
          auth_token: string
        body:
          application/json:
            type: NewPatientTherapistPair
        description: Add a patient to this therapist.
        responses: 
            204:
              description: The pairing was sucessful.
            403:
              description: The pair was not sucessful.

      get:
        queryParameters: 
          auth_token: string
        responses:
          200:
            body:
              application/json:
                type: Patient[]
          403:
            description: Bad authentication. 

      description: |
        A collection of all of a therapist's patients. For more detail on the
        patient, the top level /patient should be used.

      /{id}:
        description: For editing a specific patient-therapist combo.
        patch:
          description: Marks this patient-therapist join as accepted
          queryParameters: 
            auth_token: string
          responses: 
            204:
              description: The pair was sucessfully accepted.
            403:
              description: The pair could not be accepted.

        delete:
          queryParameters: 
            auth_token: string
          description: Removes this patient from this therapist.
          responses: 
            204:
              description: The pair was sucessfully broken.
            403:
              description: The pair could not be broken.

    /messages:
      get:
        queryParameters: 
          auth_token: string
        description: Returns every message this therapist has sent
        responses:
          200:
            body:
              application/json:
                type: Message[]
          403:
            description: Bad authentication. 
